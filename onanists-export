#!/bin/python3
from playwright.sync_api import sync_playwright
import tempfile
import os
from PIL import Image, ImageStat
from bs4 import BeautifulSoup

LOCAL_MODE = False                                     # Dev mode switch
local_export_path = '/home/waraidako/onanists-export'  # Dev mode location

#Try and find the vault
possible_vault_locations = [
    '/home/waraidako/Documents/Obsidian Vault',
    '/home/waraidako/Uni/Notes/uni-notes',
    '/home/max/Documents/onanists'
]
vault_dir = ''
for location in possible_vault_locations:
    if os.path.isdir(location):
        vault_dir = location
        break
if vault_dir == '':
    print("Obsidian vault not found!")
    exit()

document_darkmode_header = """
<!DOCTYPE html>
<head>
<meta charset="utf-8"></meta>
<style>
    @font-face {
        font-family: math-font;
        src: url(https://fred-wang.github.io/MathFonts/TeXGyreSchola/texgyreschola-math.woff2);
    }
    math {
        font-family: math-font;
    }
    body{
        font-family:Calibri;
        max-width: 50em;
        margin: auto;
        padding: 10px;
        background-color: #1c1c1c;
        color: white;
    }
    table{
        margin: 1em 0 1em 0;
    }
    table,tr,th,td{
        border: 1px solid #474747;
        border-collapse: collapse;
        text-align: left;
        vertical-align: top;
    }
    img{
        max-width: 100%;
    }
    a {
        color: #287cff
    }
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
</head>
"""

document_lightmode_header = """
<!DOCTYPE html>
<head>
<meta charset="utf-8"></meta>
<style>
    @font-face {
        font-family: math-font;
        src: url(https://fred-wang.github.io/MathFonts/TeXGyreSchola/texgyreschola-math.woff2);
    }
    math {
        font-family: math-font;
    }
    body{
        font-family:Calibri;
        max-width: 50em;
        margin: auto;
        padding: 10px;
        background-color: white;
    }
    table{
        margin: 1em 0 1em 0;
    }
    table,tr,th,td{
        border: 1px solid #474747;
        border-collapse: collapse;
        text-align: left;
        vertical-align: top;
    }
    img{
        max-width: 100%;
    }
    a {
        color: #287cff
    }
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
</head>
"""

darkmode_header = """
    <!DOCTYPE html>
    <head>
    <meta charset="utf-8"></meta>
    <style>
            body{
                font-family: Calibri;
                max-width: 50em;
                margin: auto;
                padding: 10px;
                background-color: #1c1c1c;
                color: white;
            }
            a {
                /*color: #275E9D;*/
                color: #287cff;
            }

            /* Style the button that is used to open and close the collapsible content */
            .collapsible {
                background-color: #1c1c1c;
                color: white;
                cursor: pointer;
                padding: 18px;
                width: 100%;
                border: none;
                text-align: left;
                outline: none;
                font-size: 20px;
                font-weight: bold;
            }

            /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
            .active, .collapsible:hover {
                background-color: #1c1c1c;
            }

            /* Style the collapsible content. Note: hidden by default */
            .content {
                padding: 0 18px;
                /*background-color: white;*/
                max-height: 0;
                overflow: hidden;
                transition: max-height 0.15s ease-out;
            }

            .collapsible:after {
                content: '\\02795'; /* Unicode character for "plus" sign (+) */
                font-size: 13px;
                color: #1c1c1c;
                float: right;
                margin-left: 5px;
            }

            .active:after {
                content: "\\2796"; /* Unicode character for "minus" sign (-) */
            }

            section {
                display: flex;                     /* 1 */
                align-items: baseline;             /* 2 */
                margin: auto 7% auto 3%;
            }

            section > * {
                padding: 0;
                margin: 0;
            }

            span {
                flex: 1;                          /* 3 */
                overflow: hidden;                 /* 4 */
            }

            .topright {
                position: absolute;
                top: .5%;
                right: .5%;
            }

        </style>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    </head>

    <body>
        <script>
            localStorage.setItem("mode", "darkmode")
        </script>
    <header style="height:32px">
        <a href="/lightmode.html" class="topright"><img src="sun.png" alt="moon" style="height:32px"></a>
    </header>
"""

lightmode_header = """
<!DOCTYPE html>
<head>
<meta charset="utf-8"></meta>
<style>
        body{
            font-family: Calibri;
            max-width: 50em;
            margin: auto;
            padding: 10px;
            background-color: white;
            color: #1c1c1c;
        }
        a {
            /*color: #275E9D;*/
            color: #287cff;
        }

        /* Style the button that is used to open and close the collapsible content */
        .collapsible {
            background-color: white;
            color: #1c1c1c;
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 20px;
            font-weight: bold;
        }

        /* Style the collapsible content. Note: hidden by default */
        .content {
            padding: 0 18px;
            /*background-color: white;*/
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.15s ease-out;
        }

        .collapsible:after {
            content: '\\02795'; /* Unicode character for "plus" sign (+) */
            font-size: 13px;
            /*color: #1c1c1c;*/
            float: right;
            margin-left: 5px;
        }

        .active:after {
            content: "\\2796"; /* Unicode character for "minus" sign (-) */
        }

        section {
            display: flex;                     /* 1 */
            align-items: baseline;             /* 2 */
            margin: auto 7% auto 3%;
        }

        section > * {
            padding: 0;
            margin: 0;
        }

        span {
            flex: 1;                          /* 3 */
            overflow: hidden;                 /* 4 */
        }

        .topright {
            position: absolute;
            top: .5%;
            right: .5%;
        }


    </style>
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
</head>

<body>
    <script>
        localStorage.setItem("mode", "lightmode")
    </script>
    <header style="height:32px">
        <a href="/darkmode.html" class="topright"><img src="moon.png" alt="moon"></a>
    </header>
"""

index_script = """
        <script>
            var coll = document.getElementsByClassName("collapsible");
            var i;

            for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function() {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.maxHeight){
                content.style.maxHeight = null;
                } else {
                content.style.maxHeight = content.scrollHeight + "px";
                }
            });
            }
        </script>
    </body>
"""

index_body = """
<body>
    <script>
        localMode = false

        mode = localStorage.getItem("mode")
        if (mode === null || mode == "darkmode") {
            localStorage.setItem("mode", "darkmode")
            window.location.replace(
                localMode ? "file:///home/waraidako/onanists-export/darkmode.html" : "/darkmode.html"
            )
        } else if (mode == "lightmode") {
            window.location.replace(
                localMode ? "file:///home/waraidako/onanists-export/lightmode.html" : "/lightmode.html"
            )
        }
    </script>
</body>
"""

browser_page = sync_playwright().start().chromium.launch().new_page()
browser_page.set_viewport_size({"width": 793, "height": 480})

def md_to_html(md_file, html_file, darkmode=True):
    os.system(f'pandoc "{md_file}" -o "{html_file}" --from=gfm+hard_line_breaks --mathml')
    with open(html_file, 'r+', encoding='utf-8') as f:
        content = f.read()
        content = content.replace('style="text-align: center"','style="text-align: -webkit-center"')
        content = content.replace('¯','―')
        f.seek(0, 0)
        if darkmode:
            f.write(document_darkmode_header + '\n' + content)
        else:
            f.write(document_lightmode_header + '\n' + content)

def html_to_pdf(html_file, pdf_file):
    browser_page.goto(f'file:///{html_file}')
    browser_page.pdf(path=pdf_file, margin={"top": "0cm", "right": "0cm", "bottom": "0cm", "left": "0cm"}, print_background=True, width="210mm", height=browser_page.evaluate("document.getElementsByTagName('body')[0].scrollHeight+100+'px'"))
    
def is_dark(file):
    im = Image.open(file).convert('L')
    stat = ImageStat.Stat(im)
    return stat.mean[0] < 150

from urllib.parse import unquote

def change_pictures_to_darkmode (html_file):
    with open(html_file, 'r+') as file:
        html = file.read()
        soup = BeautifulSoup(html, 'lxml')
        for img in soup.find_all('img'):
            source = img.get('src')
            if unquote(source).split('/')[-1] not in to_ignore:
                source_split = source.split('.')
                source_split[0] += f'%20darkmode'
                img['src'] = '.'.join(source_split)
        file.seek(0, 0)
        file.write(soup.prettify())
        file.truncate()

# Get list of ignored files
ignore_file_path = vault_dir + "/dark-mode-ignore.md"
if os.path.isfile(ignore_file_path):
   with open(ignore_file_path) as file:
       to_ignore = [line.rstrip() for line in file]
else:
    to_ignore = []

with tempfile.TemporaryDirectory() as temp_dir:
    os.system(f"obsidian-export '{vault_dir}' '{temp_dir}'")

    index_files = {}

    # Dark mode for images
    for root, dir, files in os.walk(temp_dir):
        for file in sorted(files):
            if file.lower().endswith(".png") or file.lower().endswith(".jpg"):
                path = root+"/"+file
                tmp = path.split('.')
                tmp[0] += ' darkmode'
                copy_path = '.'.join(tmp)
                local_path = root.replace(temp_dir+"/","")+"/"+file
                if is_dark(path):
                    print(f"modifying '{local_path}' ... ignored (already dark)")
                    if file not in to_ignore:
                        to_ignore.append(file)
                elif file in to_ignore:
                    print(f"modifying '{local_path}' ... ignored (dark-mode-ignore.md)")
                else:
                    print(f"modifying '{local_path}' ..", end="", flush=True)
                    os.system(f"magick '{path}' -colorspace HSL -channel L -level 100%,30% +level-colors 'rgb(0,0,20)','lemonchiffon' -black-threshold 20% '{copy_path}' && magick '{copy_path}' +level 10.98% '{copy_path}'")
                    print(". done")

    # .md files conversion darkmode
    for root, dir, files in os.walk(temp_dir):
        for file in sorted(files):
            if file.endswith(".md") and file != "dark-mode-ignore.md": # Don't convert the ignore file
                path_no_ext = root+"/"+file[0:-3]
                local_dir = root.replace(temp_dir+"/","")
                if local_dir not in index_files:
                    index_files[local_dir] = []
                index_files[local_dir].append(file[0:-3])
                print(f"darkmode '{local_dir+"/"+file}' .", end="", flush=True)
                md_to_html(path_no_ext+".md", path_no_ext+" darkmode.html")
                print(".", end="", flush=True)
                change_pictures_to_darkmode(path_no_ext + " darkmode.html")
                html_to_pdf(path_no_ext+" darkmode.html", path_no_ext+" darkmode.pdf")
                print(". done")

    # Generate darkmode markup body
    darkmode_html = darkmode_header + "\n"
    for group in sorted(index_files):
        darkmode_html += f'<button type="button" class="collapsible">{group}</button>\n<div class="content">'
        for file in sorted(index_files[group]):
            darkmode_html += f"""
            <section>
                {file}
                <span>..........................................................................................................................................................................................</span>
                <p><a href="{group+"/"+file+" darkmode.html"}">HTML</a> <a href="{group+"/"+file+" darkmode.pdf"}">PDF</a></p>
            </section>
            """
        darkmode_html += f'\n</div>\n'
    darkmode_html += index_script

    with open(f"{temp_dir}/darkmode.html", "w") as f:
        f.write(darkmode_html)

    # .md files conversion lightmode
    for root, dir, files in os.walk(temp_dir):
        for file in sorted(files):
            if file.endswith(".md") and file != "dark-mode-ignore.md": # Don't convert the ignore file
                path_no_ext = root+"/"+file[0:-3]
                local_dir = root.replace(temp_dir+"/","")
                #if local_dir not in index_files:
                #    index_files[local_dir] = []
                # index_files[local_dir].append(file[0:-3])
                print(f"lightmode '{local_dir+"/"+file}' .", end="", flush=True)
                md_to_html(path_no_ext+".md", path_no_ext+" lightmode.html", darkmode=False)
                print(".", end="", flush=True)
                html_to_pdf(path_no_ext+" lightmode.html", path_no_ext+" lightmode.pdf")
                print(". done")

    # Generate lightmode markup body
    lightmode_html = lightmode_header + "\n"
    for group in sorted(index_files):
        lightmode_html += f'<button type="button" class="collapsible">{group}</button>\n<div class="content">'
        for file in sorted(index_files[group]):
            lightmode_html += f"""
            <section>
                {file}
                <span>..........................................................................................................................................................................................</span>
                <p><a href="{group+"/"+file+" lightmode.html"}">HTML</a> <a href="{group+"/"+file+" lightmode.pdf"}">PDF</a></p>
            </section>
            """
        lightmode_html += f'\n</div>\n'
    lightmode_html += index_script

    with open(f"{temp_dir}/lightmode.html", "w") as f:
        f.write(lightmode_html)

    with open(f"{temp_dir}/index.html", "w") as f:
        f.write(index_body)

    # Copy the icons
    os.system(f"cp /home/waraidako/onanists-export/sun.png {temp_dir}/")
    os.system(f"cp /home/waraidako/onanists-export/moon.png {temp_dir}/")

    print("uploading to server ...", end="", flush=True)

    if LOCAL_MODE:
        os.system(f"rsync -r {temp_dir}/ {local_export_path}")                 # If in dev mode export locally
    else:
        os.system(f"rsync -r {temp_dir}/ onanists.ru:/home/max/obsidian-pdf/") # Otherwise push to prod
    
    print(" done")
